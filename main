// ==UserScript==
// @name         Mega Ad remover
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  Dynamically remove ads and unwanted elements by ID, class, patterns, and attributes
// @author       Your Name
// @match        *://*/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    // Patterns for ID matching
    const patterns = [
        /^IC_d_/,
        /^IC_D_/,
        /^globalalert_/,
        /^advertisenormal_/,
        /google_ads_iframe_/,
        /dianomi_wrapper/
    ];

    // List of specific IDs to remove
    const idsToRemove = [
        'aymStickyFooter',
        'ic_leaderboard',
        'dianomi_below_chart',
        'onesignal-slidedown-container',
        'fxs_native_ad_footer',
        'fxs_stickyFooterAd',
        'google_ads_iframe_7138/FXS30/Ecocal_0__container__',
        'fxs-sponsorBroker-topBanner',
        'wrapper dianomi_smartad_4059 _dianomi_wrapper',
        'onetrust-banner-sdk',
        'aymStickyFooterClose',
        'banner_position',
        'header-ads header-ads--50 header-ads--90 ads-component',
        'pbs__player shown',
        'ads-placeholder',
        'header-ads header-ads--50',
        '#weblayer--box-subscription-1.vertical-bottom.horizontal-right.enter-slide-right',
        '.o-ads__outer',
        '#google_image_div',
        '.n-layout__header-before',
        '_1H-CWKXO'
    ];

    // List of class keywords for partial class matching (keyword targeting)
    const classKeywords = ["web-inspector-hide-shortcut_", "globalalert", "stickyAd", "footerad"];

    // List of classes to remove
    const classesToRemove = [
        'fxs_stickyAd-mobile',
        'fxs_ad',
        'fxs_txt_center',
        'fxs_roadblock_slide',
        'fxs_leaderboard',
        'fxs_leaderboard_transition',
        'wrapper dianomi_smartad_4059 _dianomi_wrapper',
        '_dianomi_wrapper',
        'dianomi_smartad_4059',
        'onetrust-banner-sdk',
        'open-ad-component open-ad-component--body'
    ];

    // Attributes to remove based on specific ad indicators
    const attributesToRemove = [
        { attribute: 'aria-label', value: 'Advertisement' },
        { attribute: 'data-google-container-id', value: '2' }
    ];

    // Function to hide elements matching patterns, IDs, classes, and attributes
    function hideElements() {
        // Remove elements matching patterns in their ID
        document.querySelectorAll('*').forEach(element => {
            const id = element.id;
            if (id && patterns.some(pattern => pattern.test(id))) {
                element.style.display = 'none';
            }
        });

        // Remove elements by specific IDs
        idsToRemove.forEach(id => {
            const element = document.getElementById(id);
            if (element) {
                element.remove();
            }
        });

        // Remove elements by class names
        classesToRemove.forEach(className => {
            document.querySelectorAll(`.${className}`).forEach(element => element.remove());
        });

        // Remove elements by partial class match using keywords (keyword targeting)
        classKeywords.forEach(keyword => {
        document.querySelectorAll(`[class*="${keyword}"]`).forEach(el => el.remove());
        });

        // Remove elements by attributes
        attributesToRemove.forEach(attr => {
            document.querySelectorAll(`[${attr.attribute}='${attr.value}']`).forEach(element => element.remove());
        });
    }

    // Use MutationObserver to watch for DOM changes and remove elements dynamically
    var observer = new MutationObserver(hideElements);
    observer.observe(document.body, { childList: true, subtree: true });

    // Dynamically remove elements every 2 seconds
    setInterval(hideElements, 2000);

})();
